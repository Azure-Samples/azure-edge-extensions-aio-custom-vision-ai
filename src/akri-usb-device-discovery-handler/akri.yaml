---
# Source: akri/templates/custom-discovery-handler.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: usb-device-discovery-daemonset
  labels:
    helm.sh/chart: akri-0.12.9
    app.kubernetes.io/part-of: akri
    app.kubernetes.io/instance: akri
    app.kubernetes.io/version: "0.12.9"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: usb-device-discovery
    app.kubernetes.io/component: discovery-handler
spec:
  selector:
    matchLabels:
      app.kubernetes.io/part-of: akri
      app.kubernetes.io/instance: akri
      app.kubernetes.io/name: usb-device-discovery
  template:
    metadata:
      labels:
        helm.sh/chart: akri-0.12.9
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/version: "0.12.9"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: usb-device-discovery
        app.kubernetes.io/component: discovery-handler
    spec:
      containers:
      - name: usb-device-discovery
        image: "crcustomvision.azurecr.io/usb-discovery-handler-amd64:latest"
        resources:
          requests:
            memory: 11Mi
            cpu: 10m
          limits:
            memory: 24Mi
            cpu: 24m
        env:
        - name: DISCOVERY_HANDLERS_DIRECTORY
          value: /var/lib/akri
        volumeMounts:
        - name: discovery-handlers
          mountPath: /var/lib/akri
      imagePullSecrets:
        - name: secret-au-custom-vision
      nodeSelector:
        "kubernetes.io/os": linux
      volumes:
      - name: discovery-handlers
        hostPath:
          path: /var/lib/akri
---
# Source: akri/templates/custom-configuration.yaml
apiVersion: akri.sh/v0
kind: Configuration
metadata:
  name: akri-usb-camera
spec:
  discoveryHandler: 
    name: akri-usb-device-discovery-handler
    discoveryDetails: "to-modify"
  brokerSpec:
    brokerPodSpec:
      containers:
      - name: akri-usb-camera-broker
        image: "crcustomvision.azurecr.io/camera-capture-amd64:latest"
        resources:
          requests:
            "{{PLACEHOLDER}}" : "1"
            memory: 11Mi
            cpu: 10m
          limits:
            "{{PLACEHOLDER}}" : "1"
            memory: 24Mi
            cpu: 24m
        volumeMounts:
        - mountPath: /lib/modules
          name: lib-modules
      volumes:
      - hostPath:
          path: /lib/modules
        name: lib-modules
      imagePullSecrets:
      - name: secret-au-custom-vision
  instanceServiceSpec:
    type: ClusterIP
    ports:
    - name: akri-custom-instance-service
      port: 6052
      protocol: TCP
      targetPort: 6052
  configurationServiceSpec:
    type: ClusterIP
    ports:
    - name: akri-custom-configuration-service
      port: 6052
      protocol: TCP
      targetPort: 6052
  brokerProperties:
    CAMERA_CAPTURE_PORT: "5012"
    IMAGE_PROCESSING_ENDPOINT: "http://10.42.0.230:8580/image"
    SHOW_VIDEO: "true"
    VERBOSE: "true"
    VIDEO_PATH: "C:/Program Files/Git/dev/video0"
  capacity: 1
---
# Source: akri/templates/webhook-configuration.yaml
apiVersion: v1
kind: List
metadata:
  name: akri-webhook-configuration
  labels:
    helm.sh/chart: akri-0.12.9
    app.kubernetes.io/part-of: akri
    app.kubernetes.io/instance: akri
    app.kubernetes.io/version: "0.12.9"
    app.kubernetes.io/managed-by: Helm
items:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: akri-webhook-configuration
      namespace: azure-iot-operations
      labels:
        helm.sh/chart: akri-0.12.9
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/version: "0.12.9"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: akri-webhook-configuration
        app.kubernetes.io/component: admission-webhook
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: akri-webhook-configuration
      namespace: azure-iot-operations
      labels:
        helm.sh/chart: akri-0.12.9
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/version: "0.12.9"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: akri-webhook-configuration
        app.kubernetes.io/component: admission-webhook
    rules:
    - apiGroups: [""]
      resources: ["pods"]
      verbs: ["get"]
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: akri-webhook-configuration
      namespace: azure-iot-operations
      labels:
        helm.sh/chart: akri-0.12.9
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/version: "0.12.9"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: akri-webhook-configuration
        app.kubernetes.io/component: admission-webhook
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: akri-webhook-configuration
    subjects:
    - kind: ServiceAccount
      name: akri-webhook-configuration
      namespace: azure-iot-operations
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: akri-webhook-configuration
      labels:
        helm.sh/chart: akri-0.12.9
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/version: "0.12.9"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: akri-webhook-configuration
        app.kubernetes.io/component: admission-webhook
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/part-of: akri
          app.kubernetes.io/instance: akri
          app.kubernetes.io/name: akri-webhook-configuration
      template:
        metadata:
          labels:
            helm.sh/chart: akri-0.12.9
            app.kubernetes.io/part-of: akri
            app.kubernetes.io/instance: akri
            app.kubernetes.io/version: "0.12.9"
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: akri-webhook-configuration
            app.kubernetes.io/component: admission-webhook
        spec:
          containers:
          - name: webhook
            image: "ghcr.io/project-akri/akri/webhook-configuration:v0.12.9"
            imagePullPolicy: Always
            resources:
              requests:
                memory: 100Mi
                cpu: 15m
              limits:
                memory: 100Mi
                cpu: 26m
            command:
            - /server
            args:
            - --tls-crt-file=/secrets/tls.crt
            - --tls-key-file=/secrets/tls.key
            - --port=8443
            volumeMounts:
            - name: secrets
              mountPath: /secrets
              readOnly: true
          volumes:
            - name: secrets
              secret:
                secretName: akri-webhook-configuration
          imagePullSecrets:
            - name: secret-au-custom-vision
          tolerations:
            - key: node-role.kubernetes.io/master
              effect: NoSchedule
          nodeSelector:
            "kubernetes.io/os": linux
  - apiVersion: v1
    kind: Service
    metadata:
      name: akri-webhook-configuration
      labels:
        helm.sh/chart: akri-0.12.9
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/version: "0.12.9"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: akri-webhook-configuration
        app.kubernetes.io/component: admission-webhook
    spec:
      selector:
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/name: akri-webhook-configuration
      ports:
        - name: http
          port: 443
          targetPort: 8443
  - apiVersion: admissionregistration.k8s.io/v1
    kind: ValidatingWebhookConfiguration
    metadata:
      name: akri-webhook-configuration
      labels:
        helm.sh/chart: akri-0.12.9
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/version: "0.12.9"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: akri-webhook-configuration
        app.kubernetes.io/component: admission-webhook
    webhooks:
      - name: akri-webhook-configuration.azure-iot-operations.svc
        clientConfig:
          service:
            name: akri-webhook-configuration
            namespace: azure-iot-operations
            port: 443
            path: "/validate"
        rules:
          - operations:
              - "CREATE"
              - "UPDATE"
            apiGroups:
              - akri.sh
            apiVersions:
              - v0
            resources:
              - "configurations"
            scope: "*"
        admissionReviewVersions:
          - v1
          - v1beta1
        sideEffects: None
---
# Source: akri/templates/webhook-cert-autogen.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: akri-webhook-configuration-create
  namespace: azure-iot-operations
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: akri-0.12.9
    app.kubernetes.io/part-of: akri
    app.kubernetes.io/instance: akri
    app.kubernetes.io/version: "0.12.9"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
spec:
  ttlSecondsAfterFinished: 0
  template:
    metadata:
      name: akri-webhook-configuration-create
      labels:
        helm.sh/chart: akri-0.12.9
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/version: "0.12.9"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: admission-webhook
    spec:
      containers:
        - name: create
          image: "registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.1.1"
          imagePullPolicy: IfNotPresent
          args:
            - create
            - --host=akri-webhook-configuration,akri-webhook-configuration.azure-iot-operations.svc
            - --namespace=azure-iot-operations
            - --secret-name=akri-webhook-configuration
            - --cert-name=tls.crt
            - --key-name=tls.key
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      restartPolicy: OnFailure
---
# Source: akri/templates/webhook-cert-autogen.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: akri-webhook-configuration-patch
  namespace: azure-iot-operations
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: akri-0.12.9
    app.kubernetes.io/part-of: akri
    app.kubernetes.io/instance: akri
    app.kubernetes.io/version: "0.12.9"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
spec:
  ttlSecondsAfterFinished: 0
  template:
    metadata:
      name: akri-webhook-configuration-patch
      labels:
        helm.sh/chart: akri-0.12.9
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/version: "0.12.9"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: admission-webhook
    spec:
      containers:
        - name: patch
          image: "registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.1.1"
          imagePullPolicy: IfNotPresent
          args:
            - patch
            - --webhook-name=akri-webhook-configuration
            - --namespace=azure-iot-operations
            - --patch-mutating=false
            - --secret-name=akri-webhook-configuration
            - --patch-failure-policy=Fail
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
      restartPolicy: OnFailure
